name: Setup AWS Application Load Balancer Controller

on:
  push:
    branches: [ setup ]
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: false
        default: 'glide-api-cluster'
      region:
        description: 'AWS Region'
        required: false
        default: 'us-east-1'

jobs:
  setup-alb-controller:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[setup-alb]') || github.event_name == 'workflow_dispatch'"

    env:
      CLUSTER_NAME: ${{ github.event.inputs.cluster_name || 'glide-api-cluster' }}
      AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Verify EKS cluster exists
        id: verify-cluster
        run: |
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} &> /dev/null; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
            echo "EKS cluster '${{ env.CLUSTER_NAME }}' exists."
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
            echo "EKS cluster '${{ env.CLUSTER_NAME }}' does not exist. Please create it first."
            exit 1
          fi

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Create IAM Policy for ALB Controller
        id: create-iam-policy
        run: |
          echo "Downloading ALB Controller IAM Policy..."
          curl -o alb-controller-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
          
          # Check if policy already exists
          if aws iam get-policy --policy-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/AWSLoadBalancerControllerIAMPolicy &> /dev/null; then
            echo "Policy already exists, skipping creation..."
            POLICY_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/AWSLoadBalancerControllerIAMPolicy"
          else
            echo "Creating IAM policy for ALB Controller..."
            POLICY_ARN=$(aws iam create-policy \
              --policy-name AWSLoadBalancerControllerIAMPolicy \
              --policy-document file://alb-controller-policy.json \
              --query 'Policy.Arn' --output text)
          fi
          
          echo "policy_arn=${POLICY_ARN}" >> $GITHUB_OUTPUT
          echo "IAM Policy ARN: ${POLICY_ARN}"

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      - name: Create IAM Service Account for ALB Controller
        run: |
          echo "Creating IAM service account for ALB Controller..."
          # Check if service account already exists
          if kubectl get sa -n kube-system aws-load-balancer-controller &> /dev/null; then
            echo "Service account already exists, updating..."
            # Delete old service account to update it
            kubectl delete sa -n kube-system aws-load-balancer-controller || true
          fi
          
          eksctl create iamserviceaccount \
            --cluster=${{ env.CLUSTER_NAME }} \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --attach-policy-arn=${{ steps.create-iam-policy.outputs.policy_arn }} \
            --override-existing-serviceaccounts \
            --approve

      - name: Add Helm repo for ALB Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update

      - name: Check if ALB Controller is already installed
        id: check-alb
        run: |
          if helm list -n kube-system | grep aws-load-balancer-controller; then
            echo "alb_installed=true" >> $GITHUB_OUTPUT
          else
            echo "alb_installed=false" >> $GITHUB_OUTPUT
          fi

      - name: Uninstall previous ALB Controller if exists
        if: steps.check-alb.outputs.alb_installed == 'true'
        run: |
          echo "Uninstalling existing ALB Controller..."
          helm uninstall aws-load-balancer-controller -n kube-system

      - name: Install ALB Controller
        run: |
          echo "Installing AWS Load Balancer Controller..."
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=${{ env.CLUSTER_NAME }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${{ env.AWS_REGION }} \
            --set vpcId=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --query "cluster.resourcesVpcConfig.vpcId" --output text)

      - name: Verify ALB Controller installation
        run: |
          echo "Waiting for AWS Load Balancer Controller deployment to be ready..."
          kubectl -n kube-system wait --for=condition=available --timeout=120s deployment/aws-load-balancer-controller
          
          echo "Checking AWS Load Balancer Controller pods..."
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller
          
          echo "Checking AWS Load Balancer Controller deployment..."
          kubectl describe deployment -n kube-system aws-load-balancer-controller

      - name: Create Test Ingress with ALB Annotations
        run: |
          echo "Creating test ingress to verify ALB Controller..."
          cat > test-ingress.yaml << EOF
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: test-alb
            namespace: default
            annotations:
              kubernetes.io/ingress.class: alb
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/target-type: ip
          spec:
            rules:
            - http:
                paths:
                - path: /test
                  pathType: Prefix
                  backend:
                    service:
                      name: kubernetes
                      port:
                        number: 443
          EOF
          
          kubectl apply -f test-ingress.yaml
          
          echo "Waiting for ALB to be provisioned (this may take a few minutes)..."
          attempts=0
          while [ $attempts -lt 10 ]; do
            attempts=$((attempts+1))
            if kubectl get ingress test-alb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' | grep -q "amazonaws.com"; then
              echo "ALB successfully provisioned!"
              echo "ALB URL: $(kubectl get ingress test-alb -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"
              break
            fi
            echo "Waiting for ALB... (attempt $attempts/10)"
            sleep 30
          done
          
          # Clean up test ingress
          kubectl delete ingress test-alb

      - name: Create basic documentation
        run: |
          cat > ALB_CONTROLLER_USAGE.md << EOF
          # AWS Load Balancer Controller
          
          The AWS Load Balancer Controller has been installed in your EKS cluster. You can now create Ingress resources with ALB annotations.
          
          ## Example Ingress for your services
          
          \`\`\`yaml
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: glide-charge-ingress
            annotations:
              kubernetes.io/ingress.class: alb
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
              alb.ingress.kubernetes.io/ssl-redirect: '443'
              # Add your ACM certificate ARN here for HTTPS
              # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/abcd1234-5678-abcd-efgh-1234567890ab
          spec:
            rules:
            - host: api.glideliving.com
              http:
                paths:
                - path: /glide-charge
                  pathType: Prefix
                  backend:
                    service:
                      name: glide-charge-service
                      port:
                        number: 80
          \`\`\`
          
          ## Using with Custom Domain
          
          1. Once your ingress is created, get the ALB URL with:
             \`kubectl get ingress glide-charge-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'\`
          
          2. Create a CNAME record in your DNS provider pointing api.glideliving.com to this ALB hostname.
          
          3. For HTTPS, request an ACM certificate for api.glideliving.com and add the certificate ARN to the ingress annotation.
          EOF
          
          echo "Basic documentation created: ALB_CONTROLLER_USAGE.md"
          cat ALB_CONTROLLER_USAGE.md

      - name: Commit documentation
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add ALB_CONTROLLER_USAGE.md
          git commit -m "Add ALB Controller usage documentation [skip ci]" || echo "No changes to commit"
          git push || echo "Failed to push changes"